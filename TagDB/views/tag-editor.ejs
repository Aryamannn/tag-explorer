<!DOCTYPE html>
<html lang="en">
<head>
   

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tag Explorer Frontend</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" type="text/css" href="/css/tag_edits.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.5/font/bootstrap-icons.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSkt1Kp4r1ATIvxsO9lrpCjlX9xIY7PQxmZQ5tw80pM" crossorigin="anonymous">


    <title>Tag Editor</title>
    
</head>
<body>
    <div class="editor-container" >
        <div class="header">
            <span class="header-title">Tag Editor</span>
        </div>

        <div class="search-container">
            <input type="text" 
                   class="search-input" 
                   placeholder="Search tags..."
                   id="searchInput"
                   oninput="filterTags()">
        </div>
        
        <div class="content-area">
            <div class="d-grid gap-2">
            <button  class="btn btn-primary"  onclick="addMainTag()" class="add-tag-button">
                Add Tag
            </button>
            </div>

            <div id="tags-container">
                <% tags.forEach(function(tag) { %>
                    <div class="tag-container" data-tag-id="<%- tag.id %>">
                        <div class="tag-row">
                            <div class="flex items-center gap-2">
                                <button onclick="toggleExpand('<%- tag.id %>')" class="expand-button">
                                    <%- tag.isExpanded ? '▼' : '▶' %>
                                </button>
                                <span><%- tag.name %></span>
                            </div>

                            <div class="relative">
                                <button onclick="toggleMenu('<%- tag.id %>', false, event)" data-menu-toggle class="menu-toggle">
                                    •••
                                </button>

                                <div id="menu-<%- tag.id %>" class="tag-menu hidden">
                                    <button  class="menu-button edit-button" onclick="startEditing('<%- tag.id %>', '<%- tag.name %>', false)">
                                        Edit Tag
                                    </button>
                                 
                                    <button  class="menu-button add-button" onclick="addSubTag('<%- tag.id %>')">
                                        Add Value
                                    </button>
                                   
                                    <button   class="menu-button delete-button" onclick="deleteTag('<%- tag.id %>', false)">
                                        Delete Tag
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div id="subtags-<%- tag.id %>" class="subtag-container <%= tag.isExpanded ? '' : 'hidden' %>">
                            <% tag.subTags.forEach(function(subTag) { %>
                            
                                <div class="tag-row" data-subtag-id="<%- subTag.id %>">
                                    <div class="ml-6">
                                        <span><%- subTag.name %></span>
                                    </div>

                                    <div class="relative">
                                        <button onclick="toggleMenu('<%- subTag.id %>', true, '<%- tag.id %>')" data-menu-toggle class="menu-toggle">
                                            •
                                        </button>

                                        <div id="menu-<%- subTag.id %>" class="tag-menu hidden">
                                            <button class="menu-button edit-button" onclick="startEditing('<%- subTag.id %>', '<%- subTag.name %>', true, '<%- tag.id %>')">
                                                Edit Value
                                            </button>
                                            <button class="menu-button delete-button" onclick="deleteTag('<%- subTag.id %>', true, '<%- tag.id %>')">
                                                 Delete Value
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            <% }); %>
                        </div>
                    </div>
                <% }); %>
            </div>
        </div>
    </div>

    <script>
        // Global state to track editing
        let editingTag = null;
        let lastTagId = 0;

        // Utility function to generate unique IDs
        function generateId() {
            lastTagId++;
            return `tag-${lastTagId}`;
        }

        // Add main tag with API call
        async function addMainTag() {
            try {
                const response = await fetch('/tag-editor/tags/create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        tag_name: 'New Tag'
                    })
                });
                
                if (!response.ok) throw new Error('Failed to create tag');
                
                const data = await response.json();
                const newTagId = data.tag_id;
                
                const tagHtml = `
                    <div class="tag-container" data-tag-id="${newTagId}">
                        <div class="tag-row">
                            <div class="flex items-center gap-2">
                                <button onclick="toggleExpand('${newTagId}')" class="expand-button">▶</button>
                                <div class="edit-container">
                                    <input type="text"
                                           class="edit-input"
                                           value="New Tag"
                                           onkeypress="handleKeyPress(event, '${newTagId}', false)"
                                           id="edit-${newTagId}">
                                    <button onclick="saveEdit('${newTagId}', false)" class="button-green">✓</button>
                                    <button onclick="cancelEdit()" class="button-red">✗</button>
                                </div>
                            </div>
                            <div class="relative">
                                <button onclick="toggleMenu('${newTagId}', false)" data-menu-toggle class="menu-toggle">•</button>
                                <div id="menu-${newTagId}" class="tag-menu hidden">
                                    <button class="menu-button" onclick="startEditing('${newTagId}', '', false)">Edit Tag</button>
                                    <button class="menu-button" onclick="addSubTag('${newTagId}')">+ Add Tag</button>
                                    <button class="menu-button delete-button" onclick="deleteTag('${newTagId}', false)">- Delete Tag</button>
                                </div>
                            </div>
                        </div>
                        <div id="subtags-${newTagId}" class="subtag-container hidden"></div>
                    </div>
                `;
                
                const tagsContainer = document.getElementById('tags-container');
                tagsContainer.insertAdjacentHTML('beforeend', tagHtml);
                const input = document.getElementById(`edit-${newTagId}`);
                input.select();
                editingTag = { id: newTagId, isSubTag: false };
            } catch (error) {
                console.error('Error creating tag:', error);
                alert('Failed to create tag');
            }
        }

        // Add subtag
        async function addSubTag(parentId) {
            try {
                const response = await fetch(`/tag-editor/tags/${parentId}/values`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        tag_value: 'New Subtag'
                    })
                });

                if (!response.ok) throw new Error('Failed to create subtag');
                
                const data = await response.json();
                const newSubTagId = data.value_id;
                
                const subTagHtml = `
                    <div class="tag-row" data-subtag-id="${newSubTagId}">
                        <div class="ml-6">
                            <div class="edit-container">
                                <input type="text"
                                       class="edit-input"
                                       value="New Subtag"
                                       onkeypress="handleKeyPress(event, '${newSubTagId}', true, '${parentId}')"
                                       id="edit-${newSubTagId}">
                                <button onclick="saveEdit('${newSubTagId}', true, '${parentId}')" class="button-green">✓</button>
                                <button onclick="cancelEdit()" class="button-red">✗</button>
                            </div>
                        </div>
                        <div class="relative">
                            <button onclick="toggleMenu('${newSubTagId}', true, '${parentId}')" data-menu-toggle class="menu-toggle">•</button>
                            <div id="menu-${newSubTagId}" class="tag-menu hidden">
                                <button class="menu-button" onclick="startEditing('${newSubTagId}', '', true, '${parentId}')">Edit Tag</button>
                                <button class="menu-button delete-button" onclick="deleteTag('${newSubTagId}', true, '${parentId}')">- Delete Tag</button>
                            </div>
                        </div>
                    </div>
                `;
                
                const subtagsContainer = document.getElementById(`subtags-${parentId}`);
                subtagsContainer.insertAdjacentHTML('beforeend', subTagHtml);
                subtagsContainer.classList.remove('hidden');
                
                const expandButton = subtagsContainer.parentElement.querySelector('.expand-button');
                if (expandButton) expandButton.textContent = '▼';
                
                const input = document.getElementById(`edit-${newSubTagId}`);
                input.select();
                editingTag = { id: newSubTagId, isSubTag: true };
            } catch (error) {
                console.error('Error creating subtag:', error);
                alert('Failed to create subtag');
            }
        }

        // Save edit with API call
        async function saveEdit(id, isSubTag, parentId) {
            const input = document.getElementById(`edit-${id}`);
            const newName = input.value.trim();
            
            if (newName === '') {
                alert('Tag name cannot be empty');
                return;
            }
            
            try {
                const endpoint = isSubTag ? `/tag-editor/tags/values/${id}` : `/tag-editor/tags/${id}`;
                const body = isSubTag ? { tag_value: newName } : { tag_name: newName };
                
                const response = await fetch(endpoint, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(body)
                });
                
                if (!response.ok) throw new Error('Failed to update tag');
                
                const tagElement = isSubTag 
                    ? document.querySelector(`[data-subtag-id="${id}"]`) 
                    : document.querySelector(`[data-tag-id="${id}"]`).querySelector('.tag-row');
                
                const spanHtml = `<span>${newName}</span>`;
                
                if (isSubTag) {
                    tagElement.querySelector('.ml-6').innerHTML = spanHtml;
                } else {
                    const container = tagElement.querySelector('.flex.items-center.gap-2');
                    const expandButton = container.querySelector('.expand-button');
                    container.innerHTML = '';
                    container.appendChild(expandButton);
                    container.insertAdjacentHTML('beforeend', spanHtml);
                }
                
                editingTag = null;
            } catch (error) {
                console.error('Error updating tag:', error);
                alert('Failed to update tag');
            }
        }

        // Delete tag with API call
        async function deleteTag(id, isSubTag, parentId) {
            if (!confirm('Are you sure you want to delete this tag?')) return;
            
            try {
                const endpoint = isSubTag ? `/tag-editor/tags/values/${id}` : `/tag-editor/tags/${id}`;
                const response = await fetch(endpoint, {
                    method: 'DELETE'
                });
                
                if (!response.ok) throw new Error('Failed to delete tag');
                
                if (isSubTag) {
                    const subTag = document.querySelector(`[data-subtag-id="${id}"]`);
                    if (subTag) subTag.remove();
                } else {
                    const tag = document.querySelector(`[data-tag-id="${id}"]`);
                    if (tag) tag.remove();
                }
            } catch (error) {
                console.error('Error deleting tag:', error);
                alert('Failed to delete tag');
            }
        }

        // Start editing a tag
        function startEditing(id, currentName, isSubTag, parentId) {
            document.querySelectorAll('.tag-menu').forEach(menu => menu.classList.add('hidden'));
            
            const tagElement = isSubTag 
                ? document.querySelector(`[data-subtag-id="${id}"]`) 
                : document.querySelector(`[data-tag-id="${id}"]`).querySelector('.tag-row');
            
            const currentSpan = tagElement.querySelector('span');
            const currentText = currentName || currentSpan.textContent;
            
            const editHtml = `
                <div class="edit-container">
                    <input type="text"
                           class="edit-input"
                           value="${currentText}"
                           onkeypress="handleKeyPress(event, '${id}', ${isSubTag}, '${parentId || ''}')"
                           id="edit-${id}">
                    <button onclick="saveEdit('${id}', ${isSubTag}, '${parentId || ''}')" class="button-green">✓</button>
                    <button onclick="cancelEdit()" class="button-red">✗</button>
                </div>
            `;
            
            if (isSubTag) {
                tagElement.querySelector('.ml-6').innerHTML = editHtml;
            } else {
                const container = tagElement.querySelector('.flex.items-center.gap-2');
                const expandButton = container.querySelector('.expand-button');
                container.innerHTML = '';
                container.appendChild(expandButton);
                container.insertAdjacentHTML('beforeend', editHtml);
            }
            
            const input = document.getElementById(`edit-${id}`);
            input.select();
            editingTag = { id, isSubTag };
        }

        // Handle keypress events
        function handleKeyPress(event, id, isSubTag, parentId) {
            if (event.key === 'Enter') {
                saveEdit(id, isSubTag, parentId);
            } else if (event.key === 'Escape') {
                cancelEdit();
            }
        }

        // Cancel editing
        function cancelEdit() {
            if (!editingTag) return;
            
            const { id, isSubTag } = editingTag;
            const tagElement = isSubTag 
                ? document.querySelector(`[data-subtag-id="${id}"]`) 
                : document.querySelector(`[data-tag-id="${id}"]`);
            
            if (!tagElement) {
                if (isSubTag) {
                    tagElement.remove();
                } else {
                    const container = document.querySelector(`[data-tag-id="${id}"]`);
                    if (container) container.remove();
                }
            } else {
                const currentInput = document.getElementById(`edit-${id}`);
                const spanHtml = `<span>${currentInput.defaultValue}</span>`;
                
                if (isSubTag) {
                    tagElement.querySelector('.ml-6').innerHTML = spanHtml;
                } else {
                    const container = tagElement.querySelector('.flex.items-center.gap-2');
                    const expandButton = container.querySelector('.expand-button');
                    container.innerHTML = '';
                    container.appendChild(expandButton);
                    container.insertAdjacentHTML('beforeend', spanHtml);
                }
            }
            
            editingTag = null;
        }

        // Toggle expand/collapse for tags
        function toggleExpand(tagId) {
            const subtagsContainer = document.getElementById(`subtags-${tagId}`);
            const button = event.currentTarget;
            subtagsContainer.classList.toggle('hidden');
            button.textContent = subtagsContainer.classList.contains('hidden') ? '▶' : '▼';
        }

        // Toggle menu
        function toggleMenu(id, isSubTag, parentId) {
            event.stopPropagation();
            const menus = document.querySelectorAll('.tag-menu');
            menus.forEach(menu => {
                if (menu.id !== `menu-${id}`) {
                    menu.classList.add('hidden');
                }
            });
            const menu = document.getElementById(`menu-${id}`);
            menu.classList.toggle('hidden');
        }
        

        // Filter tags
        function filterTags() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const tagContainers = document.querySelectorAll('.tag-container');
            
            tagContainers.forEach(container => {
                const tagName = container.querySelector('span')?.textContent.toLowerCase() || '';
                const subTags = container.querySelectorAll('.subtag-container span');
                let match = tagName.includes(searchTerm);
                
                subTags.forEach(subTag => {
                    if (subTag.textContent.toLowerCase().includes(searchTerm)) {
                        match = true;
                    }
                });
                
                container.style.display = match ? 'block' : 'none';
            });
        }

        // Close menus when clicking outside
        document.addEventListener('click', function(event) {
            if (event.target.closest('[data-menu-toggle]') || event.target.closest('.tag-menu')) {
                return;
            }
            document.querySelectorAll('.tag-menu').forEach(menu => menu.classList.add('hidden'));
        });
    </script>
</body>
</html>